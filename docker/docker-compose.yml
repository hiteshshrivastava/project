version: "3.3"
services:
  zookeeper:
    hostname: zookeeper
    container_name: zookeeper
    image: 'bitnami/zookeeper:latest'
    ports:
      - '2181:2181'
    volumes:
      - ./mount/zookeeper/data:/data
      - ./mount/zookeeper/datalog:/datalog
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
  nifi:
    image: apache/nifi:latest
    ports:
      - 8080 # Unsecured HTTP Web Port
    environment:
      - NIFI_WEB_HTTP_PORT=8080
      - NIFI_CLUSTER_IS_NODE=true
      - NIFI_CLUSTER_NODE_PROTOCOL_PORT=8082
      - NIFI_ZK_CONNECT_STRING=zookeeper:2181
      - NIFI_ELECTION_MAX_WAIT=1 mi
  kafka:
    image: 'bitnami/kafka:latest'
    ports:
      - '9092:9092'
    volumes:
      - ./mount/kafka:/var/lib/kafka
      - ./mount/kafka:/bitnami/kafka/data
    environment:
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_DELETE_TOPIC_ENABLE=true
      - KAFKA_BROKER_ID=0
      - KAFKA_ADVERTISED_PORT=9092
      - KAFKA_ADVERTISED_HOST_NAME=192.168.2.5
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://192.168.2.5:9092
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
  spark:
    hostname: spark
    container_name: spark
    image: bitnami/spark:latest
    volumes:
      - ./mount/spark:/tmp/spark
      - ./mount/spark_jars:/tmp/spark_jars
    environment:
      - PYTHONUNBUFFERED=1
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    ports:
      - 8080
      - 7077:7077
  spark-worker:
    image: bitnami/spark:latest
    environment:
      - PYTHONUNBUFFERED=1
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark:7077
      - SPARK_WORKER_MEMORY=1G
      - SPARK_WORKER_CORES=1
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    ports:
      - 8081
  mongo:
    image: mongo:latest
    container_name: "mongo"
    environment:
      - MONGO_INITDB_DATABASE=demo
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=root
      - MONGO_NON_ROOT_USERNAME=demo
      - MONGO_NON_ROOT_PASSWORD=demo
    volumes:
      - ./mount/mongo/data/db:/data/db
    ports:
      - 27017:27017
  mongo-express:
    image: mongo-express:latest
    depends_on:
      - mongo
    ports:
      - 8081
    environment:
      - ME_CONFIG_MONGODB_SERVER=mongo
      - ME_CONFIG_MONGODB_ENABLE_ADMIN=true
      - ME_CONFIG_MONGODB_ADMINUSERNAME=root
      - ME_CONFIG_MONGODB_ADMINPASSWORD=root
      - ME_CONFIG_MONGODB_AUTH_DATABASE-demodb
      - ME_CONFIG_MONGODB_AUTH_USERNAME=demo
      - ME_CONFIG_MONGODB_AUTH_PASSWORD=demo
      - ME_CONFIG_BASICAUTH_USERNAME=demo
      - ME_CONFIG_BASICAUTH_PASSWORD=demo
    links:
      - mongo
  metabase:
    image: metabase/metabase
    ports:
      - 3000
    volumes:
      - ./mount/metabase-data:/metabase-data
    environment:
      MB_DB_TYPE: mongo
      MB_DB_DBNAME: demodb
      MB_DB_PORT: 27017
      MB_DB_USER: root
      MB_DB_PASS: root
      MB_DB_HOST: 192.168.2.5
    depends_on:
      - mongo
    links:
      - mongo
  charts:
    image: quay.io/mongodb/charts:19.12.1
    hostname: charts
    ports:
      # host:container port mapping. If you want MongoDB Charts to be
      # reachable on a different port on the docker host, change this
      # to <port>:80, e.g. 8888:80.
      - 80
      - 443
    volumes:
      - keys:/mongodb-charts/volumes/keys
      - logs:/mongodb-charts/volumes/logs
      - db-certs:/mongodb-charts/volumes/db-certs
      - web-certs:/mongodb-charts/volumes/web-certs
    environment:
      - CHARTS_MONGODB_URI=mongodb://root:root@192.168.2.5:27017
      # The presence of following 2 environment variables will enable HTTPS on Charts server.
      # All HTTP requests will be redirected to HTTPS as well.
      # To enable HTTPS, upload your certificate and key file to the web-certs volume,
      # uncomment the following lines and replace with the names of your certificate and key file.
      # CHARTS_HTTPS_CERTIFICATE_FILE: charts-https.crt
      # CHARTS_HTTPS_CERTIFICATE_KEY_FILE: charts-https.key

      # This environment variable controls the built-in support widget and
      # metrics collection in MongoDB Charts. To disable both, set the value
      # to "off". The default is "on".
      - CHARTS_SUPPORT_WIDGET_AND_METRICS='on'
      # Directory where you can upload SSL certificates (.pem format) which
      # should be considered trusted self-signed or root certificates when
      # Charts is accessing MongoDB servers with ?ssl=true
      - SSL_CERT_DIR=/mongodb-charts/volumes/db-certs

volumes:
  keys:
  logs:
  db-certs:
  web-certs:
