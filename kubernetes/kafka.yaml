apiVersion: v1
kind: Service
metadata:
  name: kafka-headless
  labels:
    app: kafka
spec:
  ports:
    - name: broker
      port: 9092
      targetPort: broker
  clusterIP: None
  selector:
    app: kafka
---
apiVersion: v1
kind: Service
metadata:
  name: kafka-cs
  labels:
    app: kafka
spec:
  ports:
    - name: broker
      port: 9092
      targetPort: broker
  selector:
    app: kafka
---
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: kafka-pdb
spec:
  selector:
    matchLabels:
      app: kafka
  maxUnavailable: 1
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: kafka
spec:
  selector:
    matchLabels:
      app: kafka
  serviceName: kafka-headless
  replicas: 3
  updateStrategy:
    type: RollingUpdate
  podManagementPolicy: OrderedReady
  template:
    metadata:
      labels:
        app: kafka
    spec:
      containers:
      - name: kafka
        imagePullPolicy: Always
        image: "bitnami/kafka:latest"
        command:
          - bash
          - -ec
          - export KAFKA_BROKER_ID=$((${HOSTNAME##*-})) && exec /entrypoint.sh /run.sh
        env:
        - name: ALLOW_PLAINTEXT_LISTENER
          value: "yes"
        - name: KAFKA_AUTO_CREATE_TOPICS_ENABLE
          value: "true"
        - name: KAFKA_CFG_ZOOKEEPER_CONNECT
          value: zookeeper-headless.project.svc.cluster.local:2181
        - name: KAFKA_DELETE_TOPIC_ENABLE
          value: "true"
        ports:
        - containerPort: 9092
          name: broker
        volumeMounts:
        - name: kafka-data
          mountPath: /bitnami/kafka/data
      securityContext:
        runAsUser: 1000
        fsGroup: 1000
  volumeClaimTemplates:
  - metadata:
      name: kafka-data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 8Gi
